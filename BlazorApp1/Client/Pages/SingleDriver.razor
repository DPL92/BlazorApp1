
@page "/driver"
@page "/driver/{id:int}"
@inject IDriverService DriverService

<h3>Fahrer</h3>

@if (Id == null)
{
    <h3>Neuen Fahrer anlegen</h3>
}
else
{
      <h3>@driver.driverFirstName  @driver.driverLastName bearbeiten</h3>
}



<EditForm Model = "@driver" OnSubmit="HandleSubmit">

    <div>
        <label for="driverFirstName">Vorname</label>
        <InputText id="driverFirstName" @bind-Value="driver.driverFirstName" class="form-control"></InputText>
    </div>

     <div>
        <label for="driverLastName">Nachname</label>
        <InputText id="driverLastName" @bind-Value="driver.driverLastName" class="form-control"></InputText>
    </div>


    <div>
        <label for="license">Führerschein</label>
        <InputText id="license" @bind-Value="driver.license" class="form-control"></InputText>
    </div>

   

    

    
    <button type="submit" class=" btn btn-primary">Speichern</button>
     <button type="button" class=" btn btn-danger" @onclick="DeleteDriver"> Löschen </button>

</EditForm>













@code {
    [Parameter]
    public int? Id { get; set; }
    
    Driver driver = new Driver();


    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {



        }

        else
        {


            driver = await DriverService.GetSingleDriver((int)Id);
        }
    }


    async Task HandleSubmit() {


        if (Id == null)
        {
            await DriverService.CreateDriver(driver);

        }

        else
        {
            await DriverService.UpdateDriver(driver);

        }

    }

    async Task DeleteDriver() {

        await DriverService.DeleteDriver(driver.driverId);
    }



}
